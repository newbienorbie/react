{"ast":null,"code":"import { GET_LOGS, SET_LOADING, LOGS_ERROR, ADD_LOG, DELETE_LOG } from \"./types\";\n\n// export const getLogs = () => {\n//   // thunk allows us to return function instead of an object. that function gets passed in a dispatch method that we can use to then dispatch to our reducer at any point, meaning we can make the request to our backend and then wait, get the response and then dispatch to the reducer.\n\n//   return async (dispatch) => {\n//     setLoading();\n\n//     const res = await fetch(\"/logs\");\n//     const data = await res.json();\n//     dispatch({\n//       type: GET_LOGS,\n//       payload: data,\n//     });\n//   };\n// };\n\n// shorter version of the top + trycatch\n// get logs from server\nexport const getLogs = () => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(\"/logs\");\n    const data = await res.json();\n    dispatch({\n      type: GET_LOGS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: error.response.data\n    });\n  }\n};\n\n// add log to server\nexport const addLog = log => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(\"/logs\", {\n      method: \"POST\",\n      body: JSON.stringify(log),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await res.json();\n    dispatch({\n      type: ADD_LOG,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: error.response.data\n    });\n  }\n};\n\n// delete log from server\nexport const deleteLog = () => async dispatch => {\n  try {\n    setLoading();\n    await fetch(`/logs/${id}`, {\n      method: \"DELETE\"\n    });\n    dispatch({\n      type: DELETE_LOG,\n      payload: id\n    });\n  } catch (error) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: error.response.data\n    });\n  }\n};\n\n// set loading to true\nexport const setLoading = () => {\n  return {\n    type: SET_LOADING\n  };\n};","map":{"version":3,"names":["GET_LOGS","SET_LOADING","LOGS_ERROR","ADD_LOG","DELETE_LOG","getLogs","dispatch","setLoading","res","fetch","data","json","type","payload","error","response","addLog","log","method","body","JSON","stringify","headers","deleteLog","id"],"sources":["/Users/norbertasandrine/Documents/studies/react/brad/it-logger-all/02-it-logger-redux/src/actions/logActions.js"],"sourcesContent":["import {\n  GET_LOGS,\n  SET_LOADING,\n  LOGS_ERROR,\n  ADD_LOG,\n  DELETE_LOG,\n} from \"./types\";\n\n// export const getLogs = () => {\n//   // thunk allows us to return function instead of an object. that function gets passed in a dispatch method that we can use to then dispatch to our reducer at any point, meaning we can make the request to our backend and then wait, get the response and then dispatch to the reducer.\n\n//   return async (dispatch) => {\n//     setLoading();\n\n//     const res = await fetch(\"/logs\");\n//     const data = await res.json();\n//     dispatch({\n//       type: GET_LOGS,\n//       payload: data,\n//     });\n//   };\n// };\n\n// shorter version of the top + trycatch\n// get logs from server\nexport const getLogs = () => async (dispatch) => {\n  try {\n    setLoading();\n\n    const res = await fetch(\"/logs\");\n    const data = await res.json();\n    dispatch({\n      type: GET_LOGS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: error.response.data,\n    });\n  }\n};\n\n// add log to server\nexport const addLog = (log) => async (dispatch) => {\n  try {\n    setLoading();\n\n    const res = await fetch(\"/logs\", {\n      method: \"POST\",\n      body: JSON.stringify(log),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    const data = await res.json();\n\n    dispatch({\n      type: ADD_LOG,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: error.response.data,\n    });\n  }\n};\n\n// delete log from server\nexport const deleteLog = () => async (dispatch) => {\n  try {\n    setLoading();\n\n    await fetch(`/logs/${id}`, {\n      method: \"DELETE\",\n    });\n\n    dispatch({\n      type: DELETE_LOG,\n      payload: id,\n    });\n  } catch (error) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: error.response.data,\n    });\n  }\n};\n\n// set loading to true\nexport const setLoading = () => {\n  return {\n    type: SET_LOADING,\n  };\n};\n"],"mappings":"AAAA,SACEA,QAAQ,EACRC,WAAW,EACXC,UAAU,EACVC,OAAO,EACPC,UAAU,QACL,SAAS;;AAEhB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM,MAAOC,QAAQ,IAAK;EAC/C,IAAI;IACFC,UAAU,CAAC,CAAC;IAEZ,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,OAAO,CAAC;IAChC,MAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;IAC7BL,QAAQ,CAAC;MACPM,IAAI,EAAEZ,QAAQ;MACda,OAAO,EAAEH;IACX,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdR,QAAQ,CAAC;MACPM,IAAI,EAAEV,UAAU;MAChBW,OAAO,EAAEC,KAAK,CAACC,QAAQ,CAACL;IAC1B,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACA,OAAO,MAAMM,MAAM,GAAIC,GAAG,IAAK,MAAOX,QAAQ,IAAK;EACjD,IAAI;IACFC,UAAU,CAAC,CAAC;IAEZ,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,OAAO,EAAE;MAC/BS,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,GAAG,CAAC;MACzBK,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IAEF,MAAMZ,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;IAE7BL,QAAQ,CAAC;MACPM,IAAI,EAAET,OAAO;MACbU,OAAO,EAAEH;IACX,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdR,QAAQ,CAAC;MACPM,IAAI,EAAEV,UAAU;MAChBW,OAAO,EAAEC,KAAK,CAACC,QAAQ,CAACL;IAC1B,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACA,OAAO,MAAMa,SAAS,GAAGA,CAAA,KAAM,MAAOjB,QAAQ,IAAK;EACjD,IAAI;IACFC,UAAU,CAAC,CAAC;IAEZ,MAAME,KAAK,CAAC,SAASe,EAAE,EAAE,EAAE;MACzBN,MAAM,EAAE;IACV,CAAC,CAAC;IAEFZ,QAAQ,CAAC;MACPM,IAAI,EAAER,UAAU;MAChBS,OAAO,EAAEW;IACX,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOV,KAAK,EAAE;IACdR,QAAQ,CAAC;MACPM,IAAI,EAAEV,UAAU;MAChBW,OAAO,EAAEC,KAAK,CAACC,QAAQ,CAACL;IAC1B,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACA,OAAO,MAAMH,UAAU,GAAGA,CAAA,KAAM;EAC9B,OAAO;IACLK,IAAI,EAAEX;EACR,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}